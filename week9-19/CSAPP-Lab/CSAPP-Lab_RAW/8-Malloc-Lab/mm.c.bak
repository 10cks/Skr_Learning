/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "Kiprey's Team",
    /* First member's full name */
    "Kiprey Xiao",
    /* First member's email address */
    "Kiprey@qq.com",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};
/*
free chunk的结构

    +-------------+
    |  chunksize  |   <- chunk size 包含两个标志位，表示当前chunk以及上一个chunk是否使用
    +-------------+
    |       fd    |   <- 用户所使用的空间，包括对齐的空间
    |       bk    |
    |   (padding) |
    +-------------+
    |   chunksize |   <- chunk size，包含一个标志位，表明当前chunk是否使用
    +-------------+
*/


/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8
/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)
#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

#define WSIZE           4
#define DSIZE           (2*WSIZE)
#define CHUNKSIZE       (1 << 12)
#define MIN_CHUNKSIZE   4*WSIZE

#define MAX(x, y) ((x) > (y) ? (x) : (y))
/* Pack a size and allocated bit into a word. */
#define PACK(size, alloc) ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)          (*(unsigned int*)(p))
#define PUT(p, val)     (*(unsigned int*)(p) = (val))

/* Read the size and allocate fields form address p */
/* 此时的p应指向chunk头部 */
#define GET_SIZE(p)     (GET(p) & ~0x7)
#define GET_ALLOC(p)    (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
/* 此时的bp指向chunk的用户地址 */
/* HDRP 传入指向用户空间的指针，返回指向当前chunk header的指针 */
//#define HDRP(bp)    ((char*)(bp) - WSIZE)
/* FTRP 传入指向用户空间的指针，返回指向当前chunk footer的指针 */
//#define FTRP(bp)    ((char*)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Given block ptr bp, compute address of next and previous blocks */
/* NEXT_BLKP 传入指向用户空间的指针，返回指向下一个chunk的用户空间的指针 */
//#define NEXT_BLKP(bp)    ((char*)(bp) + GET_SIZE(((char*)(bp) - WSIZE)))
/* PREV_BLKP 传入指向用户空间的指针，返回指向上一个chunk的用户空间的指针 */
//#define PREV_BLKP(bp)    ((char*)(bp) - GET_SIZE(((char*)(bp) - DSIZE)))

// footer可以空间复用
#define request2chunksize(size) \
     ((size) > (MIN_CHUNKSIZE - WSIZE) ? ALIGN(size+WSIZE) : MIN_CHUNKSIZE)
#define getListIndx(chunkSize) \
    ((chunkSize) > (2 << 12) ? 8 :  \
    ((chunkSize) > (2 << 11) ? 7 :  \
    ((chunkSize) > (2 << 10) ? 6 :  \
    ((chunkSize) > (2 << 9) ? 5 :   \
    ((chunkSize) > (2 << 8) ? 4 :   \
    ((chunkSize) > (2 << 7) ? 3 :   \
    ((chunkSize) > (2 << 6) ? 2 :   \
    (chunkSize) > (2 << 5) ? 1 :    \
    (chunkSize) > (2 << 4) ? 0 : -1 \
    )))))))
#define FD(p) ((char*)(p) + WSIZE)
#define BK(p) ((char*)(p) + DSIZE)
#define NEXT_CHUNK(p) (((char*)(p) + GET_SIZE(p)))
#define FOOTER(p) (NEXT_CHUNK(p) - WSIZE)

/*
ChunkSize:

0x10-0x20       2^4 - 2^5
0x20-0x40       2^5
0x40-0x80       2^6
0x80-0x100      2^7
0x100-0x200     2^8
0x200-0x400     2^9
0x400-0x800     2^10
0x800-0x1000    2^11
0x1000-~        2^12

9 bins
*/
#define HEAP_LIST_NUM 9
void*** heap_listp = NULL;

static void* coalesce(void* bp)
{
    /*size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if(prev_alloc && next_alloc)
        return bp;
    else if(prev_alloc && !next_alloc){
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
    }
    else if(!prev_alloc && next_alloc){
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    else{
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }*/
    return bp;
}


static void* extend_heap(size_t words)
{
    char* bp;
    size_t size;

    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if((long)(bp = mem_sbrk(size)) == -1)
        return NULL;
    //PUT(HDRP(bp), PACK(size, 0));
    //PUT(FTRP(bp), PACK(size, 0));
    //PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 0));

    return coalesce(bp);
}


/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{
    /*if((heap_listp = mem_sbrk(4*WSIZE)) == (void*) -1)
        return -1;
    PUT(heap_listp, 0);
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));
    heap_listp += (2*WSIZE);

    if(extend_heap(CHUNKSIZE / WSIZE) == NULL)
        return -1;*/

    // 初始化各个list
    size_t heap_list_size = HEAP_LIST_NUM * DSIZE;
    if((heap_listp = (void***)mem_sbrk(heap_list_size)) == (void*) -1)
        return -1;
    memset(heap_listp, 0, heap_list_size);

    return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
    int targetChunksize = request2chunksize(size);
    // 查找链表中是否存在需要的chunk
    for(int listIdx = getListIndx(targetChunksize); listIdx < HEAP_LIST_NUM; listIdx++)
    {
        // 如果当前遍历到的链表非空，并且该链条中最大的chunk比所申请的要大
        if(heap_listp[listIdx][0] && GET_SIZE(heap_listp[listIdx][1]) > targetChunksize)
        {
            // 遍历向下查找
            void* ptr = heap_listp[listIdx][0];
            while(GET_SIZE(ptr) < targetChunksize)
                ptr = FD(ptr);
            // 此时已经获取到了所需要的chunk，但需要判断是否分割处理
            int current_chunkSize = GET_SIZE(ptr);
            int sizeDiff = current_chunkSize - targetChunksize;
            if(sizeDiff >= MIN_CHUNKSIZE)
            {
                PUT(ptr, PACK(targetChunksize, 1));
                PUT(NEXT_CHUNK(ptr), PACK(sizeDiff, 3));
                PUT(FOOTER(NEXT_CHUNK(ptr)), sizeDiff);
            }
            else
                // 如果不需要分割，则也要设置一下标志位
                PUT(ptr, PACK(current_chunkSize, 1));


            return ptr;
        }
    }
    // 如果所有的链表中都不存在所需要的，则需要向brk申请

    /*
    size_t asize;
    size_t extendsize;
    char* bp;

    if(size == 0)
        return NULL;
    if(size <= DSIZE)
        asize = 2*DSIZE;
    else
        asize = DSIZE * ((size + (DSIZE) + (DSIZE - 1)) / DSIZE);
    if((bp = find_fit(asize)) != NULL){
        place(bp, size);
        return bp;
    }
    extendsize = MAX(asize, CHUNKSIZE);
    if((bp = extend_heap(extendsize / WSIZE)) == NULL)
        return NULL;
    place(bp, asize);
    return bp;*/
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *bp)
{
    //size_t size = GET_SIZE(HDRP(bp));
    //PUT(HDRP(bp), PACK(size, 0));
    //PUT(FTRP(bp), PACK(size, 0));
    //coalesce(bp);
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;
    copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}














